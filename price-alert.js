// === IMPORT MODULES ===
import "dotenv/config";
import axios from "axios";
import notifier from "node-notifier";
import TelegramBot from "node-telegram-bot-api";
import Decimal from "decimal.js";
import http from "http";

// === TELEGRAM CONFIG ===
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true }); // B·∫≠t polling ƒë·ªÉ nh·∫≠n l·ªánh

// === DANH S√ÅCH POOL C·∫¶N THEO D√ïI (c√≥ th·ªÉ th√™m/x√≥a ƒë·ªông qua bot) ===
const poolConfigs = [];

const RPC_URL = "https://fullnode.mainnet.sui.io/";
const interval = 60 * 1000 * 5; // ki·ªÉm tra m·ªói 5 ph√∫t

// === TR·∫†NG TH√ÅI L∆ØU C·∫¢NH B√ÅO (ƒê·ªÇ KH√îNG L·∫∂P L·∫†I) ===
const alertStatus = {}; // { poolId: 'inside' | 'outside' }

// === T√çNH NƒÇNG THEO D√ïI B·ªî SUNG (TOGGLE) ===
const trackingFeatures = {
  oneHourWarning: true, // C·∫£nh b√°o sau 1 ti·∫øng ngo√†i v√πng
  backInRangeAlert: true, // Th√¥ng b√°o khi gi√° tr·ªü l·∫°i trong v√πng
};

// === TRACKING TH·ªúI GIAN NGO√ÄI V√ôNG ===
const outsideRangeTimestamp = {}; // { poolId: timestamp }
const lastHourlyWarning = {}; // { poolId: timestamp } - l·∫ßn c·∫£nh b√°o hourly g·∫ßn nh·∫•t

// === TRACKING TH·ªúI GIAN TRONG V√ôNG (IN RANGE) ===
const inRangeStartTime = {}; // { poolId: timestamp } - th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu trong range
const totalInRangeTime = {}; // { poolId: milliseconds } - t·ªïng th·ªùi gian ƒë√£ trong range

// === H√ÄM T√çNH GI√Å T·ª™ sqrt_price ===
// C√¥ng th·ª©c CLMM cho Momentum/Sui: price = (sqrtPriceX64 / 2^64)^2
// Momentum s·ª≠ d·ª•ng Q64 thay v√¨ Q96 nh∆∞ Uniswap V3
function calcPriceFromSqrt(
  sqrtPriceStr,
  decimals0 = 6,
  decimals1 = 6,
  invert = false
) {
  const sqrtPrice = new Decimal(sqrtPriceStr);
  const Q64 = new Decimal(2).pow(64);

  // T√≠nh price t·ª´ sqrt_price
  const ratio = sqrtPrice.div(Q64);
  let price = ratio.pow(2);

  // ƒêi·ªÅu ch·ªânh theo decimal difference
  const decimalAdjustment = new Decimal(10).pow(decimals0 - decimals1);
  price = price.mul(decimalAdjustment);

  // N·∫øu c·∫ßn ƒë·∫£o ng∆∞·ª£c (token0/token1 thay v√¨ token1/token0)
  if (invert) {
    price = new Decimal(1).div(price);
  }

  return parseFloat(price.toFixed(10));
}

// === H√ÄM T√çNH T·ªîNG TH·ªúI GIAN TRONG RANGE ===
function getTotalInRangeTime(poolId) {
  const currentTime = Date.now();
  let total = totalInRangeTime[poolId] || 0;
  
  // N·∫øu hi·ªán t·∫°i ƒëang trong range, c·ªông th√™m th·ªùi gian t·ª´ l√∫c b·∫Øt ƒë·∫ßu ƒë·∫øn gi·ªù
  if (inRangeStartTime[poolId]) {
    total += currentTime - inRangeStartTime[poolId];
  }
  
  return total;
}

// === H√ÄM FORMAT TH·ªúI GIAN ===
function formatDuration(milliseconds) {
  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) {
    const remainingHours = hours % 24;
    return `${days} ng√†y ${remainingHours}h`;
  } else if (hours > 0) {
    const remainingMinutes = minutes % 60;
    return `${hours}h ${remainingMinutes}m`;
  } else if (minutes > 0) {
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  } else {
    return `${seconds}s`;
  }
}

// === H√ÄM FORMAT NG√ÄY GI·ªú (GMT+7) ===
function formatDateTime() {
  return new Date().toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false,
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

function formatTime() {
  return new Date().toLocaleTimeString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false
  });
}

// === H√ÄM L·∫§Y D·ªÆ LI·ªÜU ON-CHAIN T·ª™ RPC ===
async function getPoolData(poolId, config) {
  try {
    const payload = {
      jsonrpc: "2.0",
      id: 1,
      method: "sui_multiGetObjects",
      params: [[poolId], { showType: true, showContent: true }],
    };

    const res = await axios.post(RPC_URL, payload, {
      headers: { "Content-Type": "application/json" },
      timeout: 10000,
    });

    // M·ªôt s·ªë node tr·∫£ result d·∫°ng object, m·ªôt s·ªë d·∫°ng m·∫£ng
    const result = res.data.result;
    let pool;

    if (Array.isArray(result)) {
      pool = result[0]?.data?.content?.fields;
    } else if (result?.data) {
      // tr∆∞·ªùng h·ª£p chu·∫©n nh·∫•t c·ªßa RPC
      pool = result.data[0]?.data?.content?.fields;
    }

    // Debug nh·∫π ƒë·ªÉ xem c·∫•u tr√∫c khi kh√¥ng th·∫•y d·ªØ li·ªáu
    if (!pool) {
      console.log("‚ö†Ô∏è RPC ph·∫£n h·ªìi kh√¥ng c√≥ content.fields:");
      console.dir(res.data, { depth: 3 });
      return null;
    }

    if (!pool.sqrt_price) {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ sqrt_price trong pool:", poolId);
      console.dir(pool, { depth: 2 });
      return null;
    }

    const price = calcPriceFromSqrt(
      pool.sqrt_price,
      config.decimals0 || 6,
      config.decimals1 || 6,
      config.invert || false
    );
    return price;
  } catch (err) {
    console.error(`‚ùå L·ªói RPC ${poolId}:`, err.message);
    return null;
  }
}

// === H√ÄM CH√çNH KI·ªÇM TRA GI√Å ===
async function checkPools() {
  const now = formatTime();
  const currentTime = Date.now();

  for (const config of poolConfigs) {
    const price = await getPoolData(config.id, config);
    if (!price) {
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y gi√° cho ${config.name}`);
      continue;
    }

    const prevStatus = alertStatus[config.id] || "inside";
    const isOutside = price < config.min || price > config.max;

    // Hi·ªÉn th·ªã console
    console.log(
      `[${now}] ${config.name}: ${price.toFixed(8)} | Range: ${config.min}‚Äì${
        config.max
      }`
    );

    if (isOutside && prevStatus === "inside") {
      // ‚Üí m·ªõi v∆∞·ª£t v√πng ‚Üí g·ª≠i c·∫£nh b√°o
      const message = `‚ö†Ô∏è *${config.name}* ngo√†i v√πng ${config.min}‚Äì${
        config.max
      }\nGi√° hi·ªán t·∫°i: *${price.toFixed(8)}*\n‚è∞ ${now}`;
      notifier.notify({
        title: `${config.name} Price Alert`,
        message: `Gi√° hi·ªán t·∫°i: ${price.toFixed(8)} (ngo√†i v√πng ${config.min}‚Äì${
          config.max
        })`,
        sound: true,
      });
      await bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" });

      alertStatus[config.id] = "outside";
      
      // L∆∞u th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu ngo√†i v√πng
      outsideRangeTimestamp[config.id] = currentTime;
      lastHourlyWarning[config.id] = currentTime; // L·∫ßn ƒë·∫ßu ra ngo√†i v√πng c≈©ng l√† l·∫ßn c·∫£nh b√°o ƒë·∫ßu
      
      // C·∫≠p nh·∫≠t t·ªïng th·ªùi gian trong range tr∆∞·ªõc khi ra ngo√†i
      if (inRangeStartTime[config.id]) {
        const timeInRange = currentTime - inRangeStartTime[config.id];
        totalInRangeTime[config.id] = (totalInRangeTime[config.id] || 0) + timeInRange;
        delete inRangeStartTime[config.id]; // D·ª´ng ƒë·∫øm khi ra ngo√†i range
      }
      
    } else if (!isOutside && prevStatus === "outside") {
      // ‚Üí quay l·∫°i v√πng an to√†n ‚Üí g·ª≠i th√¥ng b√°o 1 l·∫ßn
      if (trackingFeatures.backInRangeAlert) {
        const message = `‚úÖ *${
          config.name
        }* ƒë√£ quay l·∫°i v√πng an to√†n.\nGi√° hi·ªán t·∫°i: *${price.toFixed(
          8
        )}*\n‚è∞ ${now}`;
        notifier.notify({
          title: `${config.name} Price Recovered`,
          message: `Gi√° hi·ªán t·∫°i: ${price.toFixed(8)} (ƒë√£ trong v√πng ${
            config.min
          }‚Äì${config.max})`,
        });
        await bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" });
      }

      alertStatus[config.id] = "inside";
      
      // Reset tracking khi quay l·∫°i v√πng an to√†n
      delete outsideRangeTimestamp[config.id];
      delete lastHourlyWarning[config.id];
      
      // B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian trong range l·∫°i
      inRangeStartTime[config.id] = currentTime;
      
    } else if (isOutside && prevStatus === "outside") {
      // ‚Üí v·∫´n ƒëang ngo√†i v√πng ‚Üí ki·ªÉm tra xem ƒë√£ qu√° 1 ti·∫øng k·ªÉ t·ª´ l·∫ßn c·∫£nh b√°o tr∆∞·ªõc ch∆∞a
      if (trackingFeatures.oneHourWarning && 
          outsideRangeTimestamp[config.id] && 
          lastHourlyWarning[config.id]) {
        
        const timeSinceLastWarning = currentTime - lastHourlyWarning[config.id];
        const oneHourInMs = 60 * 60 * 1000; // 1 gi·ªù = 3,600,000 ms
        
        if (timeSinceLastWarning >= oneHourInMs) {
          // T√≠nh t·ªïng th·ªùi gian ƒë√£ ngo√†i v√πng
          const totalTimeOutside = currentTime - outsideRangeTimestamp[config.id];
          const hoursOutside = Math.floor(totalTimeOutside / oneHourInMs);
          
          const message = `‚è∞ *C·∫¢NH B√ÅO:* ${config.name} ƒë√£ ngo√†i v√πng ${hoursOutside} ti·∫øng!\n\n` +
            `Gi√° hi·ªán t·∫°i: *${price.toFixed(8)}*\n` +
            `Range: ${config.min}‚Äì${config.max}\n\n` +
            `üí° _H√£y c√¢n nh·∫Øc c·∫≠p nh·∫≠t l·∫°i min/max!_\n` +
            `‚è∞ ${now}`;
          
          notifier.notify({
            title: `${config.name} - ${hoursOutside}h Outside Range`,
            message: `ƒê√£ ngo√†i v√πng ${hoursOutside} ti·∫øng! Gi√°: ${price.toFixed(8)}`,
            sound: true,
          });
          
          await bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" });
          lastHourlyWarning[config.id] = currentTime; // C·∫≠p nh·∫≠t th·ªùi gian c·∫£nh b√°o m·ªõi nh·∫•t
        }
      }
    }
  }

  console.log("‚Äî");
}

// === TELEGRAM BOT COMMANDS ===

// H√†m t·∫°o menu button
function getMainMenu() {
  return {
    reply_markup: {
      keyboard: [
        [{ text: "üìä Pools" }, { text: "üìà Gi√°" }],
        [{ text: "‚ûï Th√™m" }, { text: "‚úèÔ∏è S·ª≠a" }, { text: "üóëÔ∏è X√≥a" }],
        [{ text: "‚öôÔ∏è Toggle" }, { text: "‚ùì Help" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  };
}

// Handler: Help/Start
function handleHelp(msg) {
  const helpText = `
ü§ñ *MMT Price Alert Bot*

Ch√†o m·ª´ng! S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ thao t√°c v·ªõi bot.

üìã *Ch·ª©c nƒÉng:*
‚Ä¢ üìä Pools - Xem danh s√°ch pools
‚Ä¢ üìà Gi√° - Ki·ªÉm tra gi√° real-time
‚Ä¢ ‚ûï Th√™m - Th√™m pool m·ªõi
‚Ä¢ ‚úèÔ∏è S·ª≠a - S·ª≠a ng∆∞·ª°ng min/max
‚Ä¢ üóëÔ∏è X√≥a - X√≥a pool
‚Ä¢ ‚öôÔ∏è Toggle - B·∫≠t/t·∫Øt t√≠nh nƒÉng theo d√µi
‚Ä¢ ‚ùì Help - Xem h∆∞·ªõng d·∫´n

üìù *C√°ch th√™m pool:*
Nh·∫•n "‚ûï Th√™m" r·ªìi g·ª≠i th√¥ng tin:
\`\`\`
PoolID
PoolName
Min
Max
Invert (true/false - optional)
\`\`\`

*V√≠ d·ª•:*
\`\`\`
0xb556fc22cef...
FDUSD/USDC
0.998
1.002
false
\`\`\`

üîî *T√≠nh nƒÉng theo d√µi:*
‚Ä¢ C·∫£nh b√°o sau 1h ngo√†i v√πng
‚Ä¢ Th√¥ng b√°o khi gi√° tr·ªü l·∫°i trong v√πng
_(D√πng ‚öôÔ∏è Toggle ƒë·ªÉ b·∫≠t/t·∫Øt)_
  `;
  bot.sendMessage(msg.chat.id, helpText, {
    parse_mode: "Markdown",
    ...getMainMenu(),
  });
}

// /start - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
bot.onText(/\/start/, handleHelp);

// /help
bot.onText(/\/help/, handleHelp);

// X·ª≠ l√Ω button text
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // X·ª≠ l√Ω button menu
  if (text === "üìä Pools" || text === "/list") {
    handleListPools(msg);
    return;
  }
  
  if (text === "üìà Gi√°" || text === "/status") {
    handleStatus(msg);
    return;
  }
  
  if (text === "‚ûï Th√™m" || text === "/add") {
    handleAddPool(msg);
    return;
  }
  
  if (text === "‚úèÔ∏è S·ª≠a" || text === "/edit") {
    handleEditPool(msg);
    return;
  }
  
  if (text === "üóëÔ∏è X√≥a" || text === "/remove") {
    handleRemovePool(msg);
    return;
  }
  
  if (text === "‚öôÔ∏è Toggle" || text === "/toggle") {
    handleToggleFeatures(msg);
    return;
  }
  
  if (text === "‚ùì Help" || text === "/help" || text === "/start") {
    handleHelp(msg);
    return;
  }

  // B·ªè qua n·∫øu l√† l·ªánh kh√°c
  if (text.startsWith("/")) return;

  // X·ª≠ l√Ω c√°c thao t√°c nh·∫≠p li·ªáu (add/edit/remove pool)
  handleUserInput(msg);
});

// === HANDLER FUNCTIONS ===

// Handler: Xem danh s√°ch pools
function handleListPools(msg) {
  if (poolConfigs.length === 0) {
    bot.sendMessage(msg.chat.id, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë∆∞·ª£c theo d√µi.", getMainMenu());
    return;
  }

  let message = "üìä *Danh s√°ch Pools ƒëang theo d√µi:*\n\n";
  poolConfigs.forEach((pool, index) => {
    const status = alertStatus[pool.id] || "inside";
    const emoji = status === "inside" ? "‚úÖ" : "‚ö†Ô∏è";
    message += `${emoji} *${index + 1}. ${pool.name}*\n`;
    message += `   ID: \`${pool.id.substring(0, 20)}...\`\n`;
    message += `   Range: ${pool.min} - ${pool.max}\n`;
    message += `   Invert: ${pool.invert}\n\n`;
  });

  bot.sendMessage(msg.chat.id, message, { 
    parse_mode: "Markdown",
    ...getMainMenu()
  });
}

// /list - Xem danh s√°ch pools (legacy command support)
bot.onText(/\/list/, handleListPools);

// Handler: Xem tr·∫°ng th√°i v√† gi√° hi·ªán t·∫°i
async function handleStatus(msg) {
  bot.sendMessage(msg.chat.id, "üîÑ ƒêang ki·ªÉm tra gi√°...");

  if (poolConfigs.length === 0) {
    bot.sendMessage(msg.chat.id, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë∆∞·ª£c theo d√µi.", getMainMenu());
    return;
  }

  let message = "üìà *Gi√° hi·ªán t·∫°i:*\n\n";

  for (const config of poolConfigs) {
    const price = await getPoolData(config.id, config);
    if (!price) {
      message += `‚ùå *${config.name}*: Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°\n\n`;
      continue;
    }

    const isOutside = price < config.min || price > config.max;
    const emoji = isOutside ? "‚ö†Ô∏è" : "‚úÖ";
    const statusText = isOutside ? "NGO√ÄI V√ôNG" : "B√¨nh th∆∞·ªùng";
    
    // T√≠nh th·ªùi gian trong range
    const totalTime = getTotalInRangeTime(config.id);
    const timeStr = formatDuration(totalTime);

    message += `${emoji} *${config.name}*\n`;
    message += `   Gi√°: \`${price.toFixed(8)}\` (${statusText})\n`;
    message += `   Range: ${config.min} - ${config.max}\n`;
    message += `   ‚è±Ô∏è Th·ªùi gian trong range: ${timeStr}\n\n`;
  }

  bot.sendMessage(msg.chat.id, message, { 
    parse_mode: "Markdown",
    ...getMainMenu()
  });
}

// /status - legacy command support
bot.onText(/\/status/, handleStatus);

// Handler: Toggle tracking features
function handleToggleFeatures(msg) {
  const chatId = msg.chat.id;
  
  const statusEmoji = (enabled) => enabled ? "‚úÖ" : "‚ùå";
  
  const message = `‚öôÔ∏è *C√†i ƒë·∫∑t t√≠nh nƒÉng theo d√µi*\n\n` +
    `${statusEmoji(trackingFeatures.oneHourWarning)} *1. C·∫£nh b√°o sau 1h ngo√†i v√πng*\n` +
    `   G·ª≠i c·∫£nh b√°o n·∫øu gi√° ngo√†i v√πng qu√° 1 ti·∫øng m√† ch∆∞a c·∫≠p nh·∫≠t min/max\n\n` +
    `${statusEmoji(trackingFeatures.backInRangeAlert)} *2. Th√¥ng b√°o khi gi√° tr·ªü l·∫°i v√πng*\n` +
    `   Th√¥ng b√°o khi gi√° t·ª´ ngo√†i v√πng quay l·∫°i trong v√πng an to√†n\n\n` +
    `üìù *ƒê·ªÉ b·∫≠t/t·∫Øt:*\n` +
    `G·ª≠i s·ªë t√≠nh nƒÉng mu·ªën toggle (1 ho·∫∑c 2)\n` +
    `V√≠ d·ª•: g·ª≠i \`1\` ƒë·ªÉ toggle t√≠nh nƒÉng c·∫£nh b√°o 1h\n\n` +
    `Ho·∫∑c g·ª≠i /cancel ƒë·ªÉ h·ªßy.`;
  
  pendingAddPool[chatId] = "toggle";
  
  bot.sendMessage(chatId, message, { 
    parse_mode: "Markdown",
    ...getMainMenu()
  });
}

// /toggle - legacy command support
bot.onText(/\/toggle/, handleToggleFeatures);

// Handler: Th√™m pool m·ªõi
function handleAddPool(msg) {
  const chatId = msg.chat.id;
  pendingAddPool[chatId] = true;

  const instruction = `
üìù *Th√™m Pool M·ªõi*

Vui l√≤ng g·ª≠i th√¥ng tin theo format (m·ªói d√≤ng m·ªôt th√¥ng tin):

\`\`\`
PoolID
PoolName
Min
Max
Invert (true/false - optional)
\`\`\`

*V√≠ d·ª• ƒë·∫ßy ƒë·ªß:*
\`\`\`
0xb556fc22cef37bee2ab045bfbbd370f4080db5f6f2dd35a8eff3699ddf48e454
FDUSD/USDC
0.998
1.002
false
\`\`\`

*Ho·∫∑c b·ªè invert (m·∫∑c ƒë·ªãnh false):*
\`\`\`
0xb556fc22cef37bee2ab045bfbbd370f4080db5f6f2dd35a8eff3699ddf48e454
FDUSD/USDC
0.998
1.002
\`\`\`

G·ª≠i /cancel ƒë·ªÉ h·ªßy.
  `;

  bot.sendMessage(chatId, instruction, { 
    parse_mode: "Markdown",
    ...getMainMenu()
  });
}

// /add - legacy command support  
bot.onText(/\/add/, handleAddPool);

// L∆∞u tr·∫°ng th√°i ƒëang ch·ªù nh·∫≠p th√¥ng tin
let pendingAddPool = {};

// Handler: S·ª≠a pool
function handleEditPool(msg) {
  const chatId = msg.chat.id;

  if (poolConfigs.length === 0) {
    bot.sendMessage(chatId, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë·ªÉ s·ª≠a.", getMainMenu());
    return;
  }

  let message = "‚úèÔ∏è *Ch·ªçn pool ƒë·ªÉ s·ª≠a min/max:*\n\n";
  poolConfigs.forEach((pool, index) => {
    message += `${index + 1}. ${pool.name} (Range: ${pool.min} - ${
      pool.max
    })\n`;
  });
  message += `\nG·ª≠i s·ªë th·ª© t·ª± pool c·∫ßn s·ª≠a (v√≠ d·ª•: 1)`;

  pendingAddPool[chatId] = "edit";
  bot.sendMessage(chatId, message, { 
    parse_mode: "Markdown",
    ...getMainMenu()
  });
}

// /edit - S·ª≠a min/max c·ªßa pool
bot.onText(/\/edit/, handleEditPool);

// Handler: X√≥a pool
function handleRemovePool(msg) {
  const chatId = msg.chat.id;

  if (poolConfigs.length === 0) {
    bot.sendMessage(chatId, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë·ªÉ x√≥a.", getMainMenu());
    return;
  }

  let message = "üóëÔ∏è *Ch·ªçn pool ƒë·ªÉ x√≥a:*\n\n";
  poolConfigs.forEach((pool, index) => {
    message += `${index + 1}. ${pool.name}\n`;
  });
  message += `\nG·ª≠i s·ªë th·ª© t·ª± pool c·∫ßn x√≥a (v√≠ d·ª•: 1)`;

  pendingAddPool[chatId] = "remove";
  bot.sendMessage(chatId, message, { 
    parse_mode: "Markdown",
    ...getMainMenu()
  });
}

// /remove - X√≥a pool
bot.onText(/\/remove/, handleRemovePool);

// /cancel - H·ªßy thao t√°c
bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  delete pendingAddPool[chatId];
  bot.sendMessage(chatId, "‚ùå ƒê√£ h·ªßy thao t√°c.", getMainMenu());
});

// === X·ª¨ L√ù NH·∫¨P LI·ªÜU (ADD/EDIT/REMOVE POOL) ===
function handleUserInput(msg) {
  const chatId = msg.chat.id;
  const text = msg.text;

  // X·ª≠ l√Ω toggle features
  if (pendingAddPool[chatId] === "toggle") {
    const choice = parseInt(text);
    
    if (choice === 1) {
      trackingFeatures.oneHourWarning = !trackingFeatures.oneHourWarning;
      const status = trackingFeatures.oneHourWarning ? "B·∫¨T" : "T·∫ÆT";
      bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ *${status}* t√≠nh nƒÉng "C·∫£nh b√°o sau 1h ngo√†i v√πng"`,
        { parse_mode: "Markdown", ...getMainMenu() }
      );
      delete pendingAddPool[chatId];
      return;
    } else if (choice === 2) {
      trackingFeatures.backInRangeAlert = !trackingFeatures.backInRangeAlert;
      const status = trackingFeatures.backInRangeAlert ? "B·∫¨T" : "T·∫ÆT";
      bot.sendMessage(
        chatId,
        `‚úÖ ƒê√£ *${status}* t√≠nh nƒÉng "Th√¥ng b√°o khi gi√° tr·ªü l·∫°i v√πng"`,
        { parse_mode: "Markdown", ...getMainMenu() }
      );
      delete pendingAddPool[chatId];
      return;
    } else {
      bot.sendMessage(chatId, "‚ùå Vui l√≤ng g·ª≠i 1 ho·∫∑c 2. Ho·∫∑c /cancel ƒë·ªÉ h·ªßy.");
      return;
    }
  }

  // X·ª≠ l√Ω s·ª≠a pool - b∆∞·ªõc 1: ch·ªçn pool
  if (pendingAddPool[chatId] === "edit") {
    const index = parseInt(text) - 1;

    if (isNaN(index) || index < 0 || index >= poolConfigs.length) {
      bot.sendMessage(chatId, "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }

    const pool = poolConfigs[index];
    pendingAddPool[chatId] = { mode: "edit-values", poolIndex: index };

    bot.sendMessage(
      chatId,
      `‚úèÔ∏è S·ª≠a *${pool.name}*\n\nG·ª≠i Min v√† Max m·ªõi (2 d√≤ng):\n\`\`\`\nMin\nMax\n\`\`\`\n\n*V√≠ d·ª•:*\n\`\`\`\n0.997\n1.003\n\`\`\``,
      { parse_mode: "Markdown" }
    );
    return;
  }

  // X·ª≠ l√Ω s·ª≠a pool - b∆∞·ªõc 2: nh·∫≠p min/max m·ªõi
  if (pendingAddPool[chatId]?.mode === "edit-values") {
    const lines = text.trim().split("\n");

    if (lines.length !== 2) {
      bot.sendMessage(
        chatId,
        "‚ùå C·∫ßn ƒë√∫ng 2 d√≤ng (Min v√† Max). Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ª≠i /cancel."
      );
      return;
    }

    const [minStr, maxStr] = lines;
    const min = parseFloat(minStr);
    const max = parseFloat(maxStr);

    if (isNaN(min) || isNaN(max)) {
      bot.sendMessage(
        chatId,
        "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra l·∫°i min, max."
      );
      return;
    }

    const poolIndex = pendingAddPool[chatId].poolIndex;
    const pool = poolConfigs[poolIndex];

    pool.min = min;
    pool.max = max;

    // Reset tr·∫°ng th√°i c·∫£nh b√°o ƒë·ªÉ nh·∫≠n alert m·ªõi v·ªõi ng∆∞·ª°ng m·ªõi
    alertStatus[pool.id] = "inside";
    
    // Reset tracking timestamp v√† c·∫£nh b√°o hourly
    delete outsideRangeTimestamp[pool.id];
    delete lastHourlyWarning[pool.id];
    
    // Reset ho√†n to√†n th·ªùi gian tracking trong range
    totalInRangeTime[pool.id] = 0;
    inRangeStartTime[pool.id] = Date.now();

    delete pendingAddPool[chatId];

    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ c·∫≠p nh·∫≠t ${pool.name}*\n\nRange m·ªõi: ${min} - ${max}\n\n_Tr·∫°ng th√°i c·∫£nh b√°o v√† th·ªùi gian tracking ƒë√£ ƒë∆∞·ª£c reset v·ªÅ 0_`,
      { parse_mode: "Markdown", ...getMainMenu() }
    );
    return;
  }

  // X·ª≠ l√Ω x√≥a pool
  if (pendingAddPool[chatId] === "remove") {
    const index = parseInt(text) - 1;

    if (isNaN(index) || index < 0 || index >= poolConfigs.length) {
      bot.sendMessage(chatId, "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }

    const removedPool = poolConfigs.splice(index, 1)[0];
    
    // X√≥a t·∫•t c·∫£ tracking data c·ªßa pool
    delete alertStatus[removedPool.id];
    delete outsideRangeTimestamp[removedPool.id];
    delete lastHourlyWarning[removedPool.id];
    delete inRangeStartTime[removedPool.id];
    delete totalInRangeTime[removedPool.id];
    
    delete pendingAddPool[chatId];

    bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a pool: *${removedPool.name}*`, {
      parse_mode: "Markdown",
      ...getMainMenu()
    });
    return;
  }

  // X·ª≠ l√Ω th√™m pool
  if (pendingAddPool[chatId] === true) {
    const lines = text.trim().split("\n");

    if (lines.length < 4 || lines.length > 5) {
      bot.sendMessage(
        chatId,
        "‚ùå Thi·∫øu th√¥ng tin! C·∫ßn 4-5 d√≤ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ª≠i /cancel."
      );
      return;
    }

    const [poolId, poolName, minStr, maxStr, invertStr] = lines;

    const min = parseFloat(minStr);
    const max = parseFloat(maxStr);
    const invert = invertStr ? invertStr.toLowerCase() === "true" : false;

    if (isNaN(min) || isNaN(max)) {
      bot.sendMessage(
        chatId,
        "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra l·∫°i min, max."
      );
      return;
    }

    const newPool = {
      id: poolId.trim(),
      name: poolName.trim(),
      min,
      max,
      decimals0: 6, // M·∫∑c ƒë·ªãnh 6 (ph·ªï bi·∫øn cho stablecoins)
      decimals1: 6, // M·∫∑c ƒë·ªãnh 6
      invert,
    };

    poolConfigs.push(newPool);
    
    // Kh·ªüi t·∫°o tracking th·ªùi gian trong range cho pool m·ªõi
    inRangeStartTime[newPool.id] = Date.now();
    totalInRangeTime[newPool.id] = 0;
    
    delete pendingAddPool[chatId];

    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ th√™m pool m·ªõi:*\n\n*${newPool.name}*\nRange: ${min} - ${max}\nInvert: ${invert}\n\n_Decimals m·∫∑c ƒë·ªãnh: 6/6_\n_B·∫Øt ƒë·∫ßu theo d√µi th·ªùi gian trong range_`,
      { 
        parse_mode: "Markdown",
        ...getMainMenu()
      }
    );
  }
}

// === CH·∫†Y LI√äN T·ª§C ===
console.log("üöÄ MMT On-chain Price Alert (SUI RPC) ƒëang ch·∫°y...");
checkPools();
setInterval(checkPools, interval);


// === HTTP SERVER (CHO RENDER WEB SERVICE) ===
const PORT = process.env.PORT || 3000;
const server = http.createServer((req, res) => {
  if (req.url === "/health" || req.url === "/") {
    res.writeHead(200, { "Content-Type": "application/json" });
    res.end(
      JSON.stringify({
        status: "running",
        bot: "MMT Price Alert",
        pools: poolConfigs.length,
        uptime: process.uptime(),
        timestamp: new Date().toISOString(),
      })
    );
  } else {
    res.writeHead(404);
    res.end("Not Found");
  }
});

server.listen(PORT, () => {
  console.log(`üåê HTTP server listening on port ${PORT} (for Render health check)`);
});

// === KEEP-ALIVE: T·ª∞ ƒê·ªòNG PING ƒê·ªÇ GI·ªÆ SERVER HO·∫†T ƒê·ªòNG ===
// Ch·ªâ ch·∫°y khi c√≥ bi·∫øn m√¥i tr∆∞·ªùng REPL_SLUG (ch·ªâ c√≥ tr√™n Replit)
if (process.env.REPL_SLUG) {
  const REPLIT_URL = `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`;
  
  // Ping m·ªói 4 ph√∫t ƒë·ªÉ gi·ªØ Replit kh√¥ng ng·ªß (Replit timeout sau ~5 ph√∫t kh√¥ng activity)
  setInterval(() => {
    axios.get(`${REPLIT_URL}/health`)
      .then(() => {
        console.log(`üîÑ [${formatTime()}] Keep-alive ping successful`);
      })
      .catch(err => {
        console.error(`‚ö†Ô∏è Keep-alive ping failed:`, err.message);
      });
  }, 3 * 60 * 1000); // 3 ph√∫t
  
  console.log(`üîÑ Keep-alive enabled cho Replit: ${REPLIT_URL}`);
}
