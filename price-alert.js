// === IMPORT MODULES ===
import "dotenv/config";
import axios from "axios";
import notifier from "node-notifier";
import TelegramBot from "node-telegram-bot-api";
import Decimal from "decimal.js";
import http from "http";

// === TELEGRAM CONFIG ===
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true }); // B·∫≠t polling ƒë·ªÉ nh·∫≠n l·ªánh

// === DANH S√ÅCH POOL C·∫¶N THEO D√ïI (c√≥ th·ªÉ th√™m/x√≥a ƒë·ªông qua bot) ===
const poolConfigs = [];

const RPC_URL = "https://fullnode.mainnet.sui.io/";
const interval = 60 * 1000 * 5; // ki·ªÉm tra m·ªói 5 ph√∫t

// === TR·∫†NG TH√ÅI L∆ØU C·∫¢NH B√ÅO (ƒê·ªÇ KH√îNG L·∫∂P L·∫†I) ===
const alertStatus = {}; // { poolId: 'inside' | 'outside' }

// === H√ÄM T√çNH GI√Å T·ª™ sqrt_price ===
// C√¥ng th·ª©c CLMM cho Momentum/Sui: price = (sqrtPriceX64 / 2^64)^2
// Momentum s·ª≠ d·ª•ng Q64 thay v√¨ Q96 nh∆∞ Uniswap V3
function calcPriceFromSqrt(
  sqrtPriceStr,
  decimals0 = 6,
  decimals1 = 6,
  invert = false
) {
  const sqrtPrice = new Decimal(sqrtPriceStr);
  const Q64 = new Decimal(2).pow(64);

  // T√≠nh price t·ª´ sqrt_price
  const ratio = sqrtPrice.div(Q64);
  let price = ratio.pow(2);

  // ƒêi·ªÅu ch·ªânh theo decimal difference
  const decimalAdjustment = new Decimal(10).pow(decimals0 - decimals1);
  price = price.mul(decimalAdjustment);

  // N·∫øu c·∫ßn ƒë·∫£o ng∆∞·ª£c (token0/token1 thay v√¨ token1/token0)
  if (invert) {
    price = new Decimal(1).div(price);
  }

  return parseFloat(price.toFixed(10));
}

// === H√ÄM L·∫§Y D·ªÆ LI·ªÜU ON-CHAIN T·ª™ RPC ===
async function getPoolData(poolId, config) {
  try {
    const payload = {
      jsonrpc: "2.0",
      id: 1,
      method: "sui_multiGetObjects",
      params: [[poolId], { showType: true, showContent: true }],
    };

    const res = await axios.post(RPC_URL, payload, {
      headers: { "Content-Type": "application/json" },
      timeout: 10000,
    });

    // M·ªôt s·ªë node tr·∫£ result d·∫°ng object, m·ªôt s·ªë d·∫°ng m·∫£ng
    const result = res.data.result;
    let pool;

    if (Array.isArray(result)) {
      pool = result[0]?.data?.content?.fields;
    } else if (result?.data) {
      // tr∆∞·ªùng h·ª£p chu·∫©n nh·∫•t c·ªßa RPC
      pool = result.data[0]?.data?.content?.fields;
    }

    // Debug nh·∫π ƒë·ªÉ xem c·∫•u tr√∫c khi kh√¥ng th·∫•y d·ªØ li·ªáu
    if (!pool) {
      console.log("‚ö†Ô∏è RPC ph·∫£n h·ªìi kh√¥ng c√≥ content.fields:");
      console.dir(res.data, { depth: 3 });
      return null;
    }

    if (!pool.sqrt_price) {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ sqrt_price trong pool:", poolId);
      console.dir(pool, { depth: 2 });
      return null;
    }

    const price = calcPriceFromSqrt(
      pool.sqrt_price,
      config.decimals0 || 6,
      config.decimals1 || 6,
      config.invert || false
    );
    return price;
  } catch (err) {
    console.error(`‚ùå L·ªói RPC ${poolId}:`, err.message);
    return null;
  }
}

// === H√ÄM CH√çNH KI·ªÇM TRA GI√Å ===
async function checkPools() {
  const now = new Date().toLocaleTimeString("vi-VN", { hour12: false });

  for (const config of poolConfigs) {
    const price = await getPoolData(config.id, config);
    if (!price) {
      console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y gi√° cho ${config.name}`);
      continue;
    }

    const prevStatus = alertStatus[config.id] || "inside";
    const isOutside = price < config.min || price > config.max;

    // Hi·ªÉn th·ªã console
    console.log(
      `[${now}] ${config.name}: ${price.toFixed(8)} | Range: ${config.min}‚Äì${
        config.max
      }`
    );

    if (isOutside && prevStatus === "inside") {
      // ‚Üí m·ªõi v∆∞·ª£t v√πng ‚Üí g·ª≠i c·∫£nh b√°o
      const message = `‚ö†Ô∏è *${config.name}* ngo√†i v√πng ${config.min}‚Äì${
        config.max
      }\nGi√° hi·ªán t·∫°i: *${price.toFixed(8)}*\n‚è∞ ${now}`;
      notifier.notify({
        title: `${config.name} Price Alert`,
        message: `Gi√° hi·ªán t·∫°i: ${price.toFixed(8)} (ngo√†i v√πng ${config.min}‚Äì${
          config.max
        })`,
        sound: true,
      });
      await bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" });

      alertStatus[config.id] = "outside";
    } else if (!isOutside && prevStatus === "outside") {
      // ‚Üí quay l·∫°i v√πng an to√†n ‚Üí g·ª≠i th√¥ng b√°o 1 l·∫ßn
      const message = `‚úÖ *${
        config.name
      }* ƒë√£ quay l·∫°i v√πng an to√†n.\nGi√° hi·ªán t·∫°i: *${price.toFixed(
        8
      )}*\n‚è∞ ${now}`;
      notifier.notify({
        title: `${config.name} Price Recovered`,
        message: `Gi√° hi·ªán t·∫°i: ${price.toFixed(8)} (ƒë√£ trong v√πng ${
          config.min
        }‚Äì${config.max})`,
      });
      await bot.sendMessage(CHAT_ID, message, { parse_mode: "Markdown" });

      alertStatus[config.id] = "inside";
    }
  }

  console.log("‚Äî");
}

// === TELEGRAM BOT COMMANDS ===

// /start - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
bot.onText(/\/start/, (msg) => {
  const helpText = `
ü§ñ *MMT Price Alert Bot*

üìã *L·ªánh c√≥ s·∫µn:*
/list - Xem danh s√°ch pools ƒëang theo d√µi
/add - Th√™m pool m·ªõi
/edit - S·ª≠a min/max c·ªßa pool
/remove - X√≥a pool
/status - Xem tr·∫°ng th√°i hi·ªán t·∫°i
/help - Xem h∆∞·ªõng d·∫´n

üìù *C√°ch th√™m pool:*
\`/add\`
Sau ƒë√≥ g·ª≠i th√¥ng tin theo format:
\`\`\`
PoolID
PoolName
Min
Max
Invert (true/false - optional, m·∫∑c ƒë·ªãnh false)
\`\`\`

*V√≠ d·ª•:*
\`\`\`
0xabc123...
USDT/USDC
0.998
1.002
false
\`\`\`

Ho·∫∑c ng·∫Øn g·ªçn h∆°n (b·ªè invert):
\`\`\`
0xabc123...
USDT/USDC
0.998
1.002
\`\`\`
  `;
  bot.sendMessage(msg.chat.id, helpText, { parse_mode: "Markdown" });
});

// /help
bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id, "G·ª≠i /start ƒë·ªÉ xem h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß", {
    parse_mode: "Markdown",
  });
});

// /list - Xem danh s√°ch pools
bot.onText(/\/list/, (msg) => {
  if (poolConfigs.length === 0) {
    bot.sendMessage(msg.chat.id, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë∆∞·ª£c theo d√µi.");
    return;
  }

  let message = "üìä *Danh s√°ch Pools ƒëang theo d√µi:*\n\n";
  poolConfigs.forEach((pool, index) => {
    const status = alertStatus[pool.id] || "inside";
    const emoji = status === "inside" ? "‚úÖ" : "‚ö†Ô∏è";
    message += `${emoji} *${index + 1}. ${pool.name}*\n`;
    message += `   ID: \`${pool.id.substring(0, 20)}...\`\n`;
    message += `   Range: ${pool.min} - ${pool.max}\n`;
    message += `   Invert: ${pool.invert}\n\n`;
  });

  bot.sendMessage(msg.chat.id, message, { parse_mode: "Markdown" });
});

// /status - Xem tr·∫°ng th√°i v√† gi√° hi·ªán t·∫°i
bot.onText(/\/status/, async (msg) => {
  bot.sendMessage(msg.chat.id, "üîÑ ƒêang ki·ªÉm tra gi√°...");

  if (poolConfigs.length === 0) {
    bot.sendMessage(msg.chat.id, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë∆∞·ª£c theo d√µi.");
    return;
  }

  let message = "üìà *Gi√° hi·ªán t·∫°i:*\n\n";

  for (const config of poolConfigs) {
    const price = await getPoolData(config.id, config);
    if (!price) {
      message += `‚ùå *${config.name}*: Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°\n\n`;
      continue;
    }

    const isOutside = price < config.min || price > config.max;
    const emoji = isOutside ? "‚ö†Ô∏è" : "‚úÖ";
    const statusText = isOutside ? "NGO√ÄI V√ôNG" : "B√¨nh th∆∞·ªùng";

    message += `${emoji} *${config.name}*\n`;
    message += `   Gi√°: \`${price.toFixed(8)}\` (${statusText})\n`;
    message += `   Range: ${config.min} - ${config.max}\n\n`;
  }

  bot.sendMessage(msg.chat.id, message, { parse_mode: "Markdown" });
});

// /add - Th√™m pool m·ªõi (b∆∞·ªõc 1)
let pendingAddPool = {}; // L∆∞u tr·∫°ng th√°i ƒëang ch·ªù nh·∫≠p th√¥ng tin

bot.onText(/\/add/, (msg) => {
  const chatId = msg.chat.id;
  pendingAddPool[chatId] = true;

  const instruction = `
üìù *Th√™m Pool M·ªõi*

Vui l√≤ng g·ª≠i th√¥ng tin theo format (m·ªói d√≤ng m·ªôt th√¥ng tin):

\`\`\`
PoolID
PoolName
Min
Max
Invert (true/false - optional)
\`\`\`

*V√≠ d·ª• ƒë·∫ßy ƒë·ªß:*
\`\`\`
0xb556fc22cef37bee2ab045bfbbd370f4080db5f6f2dd35a8eff3699ddf48e454
USDT/USDC
0.998
1.002
false
\`\`\`

*Ho·∫∑c b·ªè invert (m·∫∑c ƒë·ªãnh false):*
\`\`\`
0xb556fc22cef37bee2ab045bfbbd370f4080db5f6f2dd35a8eff3699ddf48e454
USDT/USDC
0.998
1.002
\`\`\`

G·ª≠i /cancel ƒë·ªÉ h·ªßy.
  `;

  bot.sendMessage(chatId, instruction, { parse_mode: "Markdown" });
});

// /edit - S·ª≠a min/max c·ªßa pool
bot.onText(/\/edit/, (msg) => {
  const chatId = msg.chat.id;

  if (poolConfigs.length === 0) {
    bot.sendMessage(chatId, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë·ªÉ s·ª≠a.");
    return;
  }

  let message = "‚úèÔ∏è *Ch·ªçn pool ƒë·ªÉ s·ª≠a min/max:*\n\n";
  poolConfigs.forEach((pool, index) => {
    message += `${index + 1}. ${pool.name} (Range: ${pool.min} - ${
      pool.max
    })\n`;
  });
  message += `\nG·ª≠i s·ªë th·ª© t·ª± pool c·∫ßn s·ª≠a (v√≠ d·ª•: 1)`;

  pendingAddPool[chatId] = "edit";
  bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
});

// /remove - X√≥a pool
bot.onText(/\/remove/, (msg) => {
  const chatId = msg.chat.id;

  if (poolConfigs.length === 0) {
    bot.sendMessage(chatId, "üì≠ Ch∆∞a c√≥ pool n√†o ƒë·ªÉ x√≥a.");
    return;
  }

  let message = "üóëÔ∏è *Ch·ªçn pool ƒë·ªÉ x√≥a:*\n\n";
  poolConfigs.forEach((pool, index) => {
    message += `${index + 1}. ${pool.name}\n`;
  });
  message += `\nG·ª≠i s·ªë th·ª© t·ª± pool c·∫ßn x√≥a (v√≠ d·ª•: 1)`;

  pendingAddPool[chatId] = "remove";
  bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
});

// /cancel - H·ªßy thao t√°c
bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  delete pendingAddPool[chatId];
  bot.sendMessage(chatId, "‚ùå ƒê√£ h·ªßy thao t√°c.");
});

// X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng (th√™m/x√≥a pool)
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // B·ªè qua n·∫øu l√† l·ªánh
  if (text.startsWith("/")) return;

  // X·ª≠ l√Ω s·ª≠a pool - b∆∞·ªõc 1: ch·ªçn pool
  if (pendingAddPool[chatId] === "edit") {
    const index = parseInt(text) - 1;

    if (isNaN(index) || index < 0 || index >= poolConfigs.length) {
      bot.sendMessage(chatId, "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }

    const pool = poolConfigs[index];
    pendingAddPool[chatId] = { mode: "edit-values", poolIndex: index };

    bot.sendMessage(
      chatId,
      `‚úèÔ∏è S·ª≠a *${pool.name}*\n\nG·ª≠i Min v√† Max m·ªõi (2 d√≤ng):\n\`\`\`\nMin\nMax\n\`\`\`\n\n*V√≠ d·ª•:*\n\`\`\`\n0.997\n1.003\n\`\`\``,
      { parse_mode: "Markdown" }
    );
    return;
  }

  // X·ª≠ l√Ω s·ª≠a pool - b∆∞·ªõc 2: nh·∫≠p min/max m·ªõi
  if (pendingAddPool[chatId]?.mode === "edit-values") {
    const lines = text.trim().split("\n");

    if (lines.length !== 2) {
      bot.sendMessage(
        chatId,
        "‚ùå C·∫ßn ƒë√∫ng 2 d√≤ng (Min v√† Max). Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ª≠i /cancel."
      );
      return;
    }

    const [minStr, maxStr] = lines;
    const min = parseFloat(minStr);
    const max = parseFloat(maxStr);

    if (isNaN(min) || isNaN(max)) {
      bot.sendMessage(
        chatId,
        "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra l·∫°i min, max."
      );
      return;
    }

    const poolIndex = pendingAddPool[chatId].poolIndex;
    const pool = poolConfigs[poolIndex];

    pool.min = min;
    pool.max = max;

    // Reset tr·∫°ng th√°i c·∫£nh b√°o ƒë·ªÉ nh·∫≠n alert m·ªõi v·ªõi ng∆∞·ª°ng m·ªõi
    alertStatus[pool.id] = "inside";

    delete pendingAddPool[chatId];

    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ c·∫≠p nh·∫≠t ${pool.name}*\n\nRange m·ªõi: ${min} - ${max}\n\n_Tr·∫°ng th√°i c·∫£nh b√°o ƒë√£ ƒë∆∞·ª£c reset_`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  // X·ª≠ l√Ω x√≥a pool
  if (pendingAddPool[chatId] === "remove") {
    const index = parseInt(text) - 1;

    if (isNaN(index) || index < 0 || index >= poolConfigs.length) {
      bot.sendMessage(chatId, "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
      return;
    }

    const removedPool = poolConfigs.splice(index, 1)[0];
    delete alertStatus[removedPool.id];
    delete pendingAddPool[chatId];

    bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a pool: *${removedPool.name}*`, {
      parse_mode: "Markdown",
    });
    return;
  }

  // X·ª≠ l√Ω th√™m pool
  if (pendingAddPool[chatId] === true) {
    const lines = text.trim().split("\n");

    if (lines.length < 4 || lines.length > 5) {
      bot.sendMessage(
        chatId,
        "‚ùå Thi·∫øu th√¥ng tin! C·∫ßn 4-5 d√≤ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ª≠i /cancel."
      );
      return;
    }

    const [poolId, poolName, minStr, maxStr, invertStr] = lines;

    const min = parseFloat(minStr);
    const max = parseFloat(maxStr);
    const invert = invertStr ? invertStr.toLowerCase() === "true" : false;

    if (isNaN(min) || isNaN(max)) {
      bot.sendMessage(
        chatId,
        "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra l·∫°i min, max."
      );
      return;
    }

    const newPool = {
      id: poolId.trim(),
      name: poolName.trim(),
      min,
      max,
      decimals0: 6, // M·∫∑c ƒë·ªãnh 6 (ph·ªï bi·∫øn cho stablecoins)
      decimals1: 6, // M·∫∑c ƒë·ªãnh 6
      invert,
    };

    poolConfigs.push(newPool);
    delete pendingAddPool[chatId];

    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ th√™m pool m·ªõi:*\n\n*${newPool.name}*\nRange: ${min} - ${max}\nInvert: ${invert}\n\n_Decimals m·∫∑c ƒë·ªãnh: 6/6_`,
      { parse_mode: "Markdown" }
    );
  }
});

// === CH·∫†Y LI√äN T·ª§C ===
console.log("üöÄ MMT On-chain Price Alert (SUI RPC) ƒëang ch·∫°y...");
checkPools();
setInterval(checkPools, interval);


// === HTTP SERVER (CHO RENDER WEB SERVICE) ===
const PORT = process.env.PORT || 3000;
const server = http.createServer((req, res) => {
  if (req.url === "/health" || req.url === "/") {
    res.writeHead(200, { "Content-Type": "application/json" });
    res.end(
      JSON.stringify({
        status: "running",
        bot: "MMT Price Alert",
        pools: poolConfigs.length,
        uptime: process.uptime(),
      })
    );
  } else {
    res.writeHead(404);
    res.end("Not Found");
  }
});

server.listen(PORT, () => {
  console.log(`üåê HTTP server listening on port ${PORT} (for Render health check)`);
});
